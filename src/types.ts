import type { KVNamespace } from '@cloudflare/workers-types';

// Environment variables expected by the Worker
export interface Env {
	// KV Namespaces
	PIXEL_STATE: KVNamespace; // Stores state for individual pixel fires (e.g., transaction details)
	PIXEL_CONFIG: KVNamespace; // Stores site configuration, action definitions, etc.
	ADMIN_UI_ASSETS: KVNamespace; // For serving the admin UI static files

	// Secrets / API Keys
	ADMIN_USERNAME?: string; // Basic Auth username for admin UI
	ADMIN_PASSWORD?: string; // Basic Auth password hash for admin UI
	JWT_SECRET: string; // Secret for signing JWTs for admin sessions

	FB_PIXEL_ID?: string; // Default Facebook Pixel ID
	FB_ACCESS_TOKEN?: string; // Facebook Conversions API Access Token
	FB_TEST_CODE?: string; // Optional Facebook Test Event Code

	GA_MEASUREMENT_ID?: string; // Optional Google Analytics Measurement ID (e.g., G-XXXX)
	GA_API_SECRET?: string; // Optional Google Analytics Measurement Protocol API Secret

	EF_COMPANY_ID?: string; // Optional Everflow Company ID
	EF_API_KEY?: string; // Optional Everflow API Key

	STICKY_API_URL?: string; // Sticky.io API endpoint URL
	STICKY_USERNAME?: string; // Sticky.io API username
	STICKY_PASSWORD?: string; // Sticky.io API password

	// Add other environment variables as needed
	// MY_OTHER_VARIABLE: string;
}

// Structure for storing the state of a pixel transaction in KV
export interface PixelState {
	internal_txn_id: string; // Unique ID generated by the worker
	siteId: string; // The site ID this transaction belongs to
	timestamp_created: string; // ISO 8601 timestamp when the state was first created
	status?: 'pending' | 'processed' | 'error' | 'failed' | 'paypal_redirect'; // Added 'failed' and 'paypal_redirect'
	trackingParams: { // Parameters captured from the initial request
		[key: string]: string | undefined; // Allow flexible tracking params like click_id, affId, c1, c2, c3 etc.
	};
	scrubDecision?: { // Decision from the scrubbing process (optional)
		isScrub: boolean;
		reason?: string;
		targetCampaignId?: string; // e.g., the campaign ID to route to after scrubbing
	};
		 stickyOrderId_Initial?: string | null; // Sticky.io Order ID from the initial purchase
		 targetCampaignId?: string | null; // Campaign ID determined during checkout/scrubbing, used for upsells
	paymentMethod_Initial?: 'card' | 'paypal' | null; // Added payment method for initial order
	// Flags to track processing stages (can add more for different event types)
	processed_Initial: boolean;
	processed_Upsell_1: boolean;
	processed_Upsell_2: boolean; // Example for a second upsell step
	// Timestamps for processing stages
	timestamp_processed_Initial: string | null;
	timestamp_processed_Upsell_1: string | null;
	// Add more fields as needed, e.g., specific data points required for later actions
	// customer_email?: string; // Example: Store email if needed for delayed actions
	stickyOrderId_Upsell1?: string | null; // Added for upsell tracking
	stickyOrderId_Upsell2?: string | null; // Added for upsell tracking
	timestamp_processed_Upsell_2?: string | null; // Added for upsell tracking
}

// --- Sticky.io Related Types ---

// Represents payment data, potentially including encrypted fields
export interface PaymentData {
	paymentType?: 'paypal' | 'credit_card'; // Type of payment
	cardType?: string; // e.g., 'visa', 'mastercard' (Set by worker)
	creditCardNumber?: string; // For Sticky.io (Set by worker from raw/decrypted)
	expirationDate?: string; // For Sticky.io (MMYY) (Set by worker from raw/decrypted)
	CVV?: string; // For Sticky.io (Set by worker from raw/decrypted)
	// Raw fields potentially sent from client (INSECURE)
	cardNumber?: string; // Raw card number from client
	expirationMonth?: string; // Raw month from client
	expirationYear?: string; // Raw year from client
	cvv?: string; // Raw CVV from client (lowercase)
	// Encrypted fields (if client-side encryption is used)
	encryptedCard?: EncryptedData | string;
	encryptedExpiry?: EncryptedData | string;
	encryptedCvv?: EncryptedData | string;
}

// Structure for the payload sent to Sticky.io NewOrder API
export interface StickyPayload {
	firstName?: string;
	lastName?: string;
	billingFirstName?: string;
	billingLastName?: string;
	billingAddress1?: string;
	billingAddress2?: string;
	billingCity?: string;
	billingState?: string;
	billingZip?: string;
	billingCountry?: string;
	phone?: string;
	email?: string;
	shippingId?: number | string; // Can be number or string depending on source
	shippingAddress1?: string;
	shippingAddress2?: string;
	shippingCity?: string;
	shippingState?: string;
	shippingZip?: string;
	shippingCountry?: string;
	billingSameAsShipping?: 'YES' | 'NO';
	tranType?: 'Sale' | string; // Typically 'Sale'
	payment?: PaymentData; // Payment details
	campaignId?: string | null; // Target campaign ID
	offers?: { product_id: number; offer_id: number; billing_model_id: number; quantity: number }[]; // Product offers
	ipAddress?: string;
	// Tracking parameters
	AFID?: string;
	SID?: string;
	AFFID?: string;
	C1?: string;
	C2?: string;
	C3?: string;
	AID?: string;
	click_id?: string;
	utm_source?: string;
	utm_medium?: string;
	utm_campaign?: string;
	utm_content?: string;
	utm_term?: string;
	// Add other fields as needed by Sticky.io API
}

// Structure for encrypted data (assuming AES-GCM)
export interface EncryptedData {
	iv: string; // Initialization Vector (hex encoded)
	ciphertext: string; // Ciphertext (hex encoded)
	authTag: string; // Authentication Tag (hex encoded)
}


// --- Configuration Types (Stored in PIXEL_CONFIG KV) ---

// Defines configuration specific to a site/domain
export interface SiteConfig {
	siteId: string; // e.g., 'drivebright'
	domain: string; // e.g., 'www.drivebright.com'
	pages: Record<string, PageConfig>; // Map page identifiers (e.g., 'checkout', 'upsell1') to their configs
	payoutConfig?: PayoutConfig; // Optional payout configuration
	// Add other site-level settings like default pixel IDs if needed
}

// Defines configuration for a specific page within a site
export interface PageConfig {
	pageId: string; // Matches the key in SiteConfig.pages (e.g., 'checkout')
	pathPattern: string; // Regex pattern to match the page URL path (e.g., '/checkout.*')
	event: 'Initial' | 'Upsell_1' | 'Upsell_2'; // Type of event this page corresponds to
	actions: {
		normal: string[]; // List of action keys (e.g., ['fb_purchase', 'ga_purchase', 'ef_postback']) for normal processing
		scrub?: string[]; // Optional list of action keys for scrubbed transactions
	};
}

// Defines payout settings, potentially per affiliate
export interface PayoutConfig {
	defaultPayoutSteps: number; // Default number of steps required for payout (e.g., 1 for initial, 2 for initial+upsell1)
	affiliatePayoutSteps?: Record<string, number>; // Override payout steps per affiliate ID (e.g., { 'aff123': 2 })
}

// Defines a single action (pixel fire, server postback, etc.)
// Using discriminated union for type safety based on 'type'
export type ActionDefinition = ServerSideActionDefinition | ClientSideActionDefinition;

interface ActionDefinitionBase {
	actionKey: string; // Unique key for this action (e.g., 'fb_purchase_capi')
	provider: string; // e.g., 'facebook', 'google', 'everflow', 'custom'
	type: 'server-side' | 'client-side';
}

export interface ServerSideActionDefinition extends ActionDefinitionBase {
	type: 'server-side';
	config: ApiEndpointConfig; // Configuration for the API call
}

export interface ClientSideActionDefinition extends ActionDefinitionBase {
	type: 'client-side';
	config: PixelConfig; // Configuration for the client-side script/pixel
}


// Configuration for a server-side API endpoint action
export interface ApiEndpointConfig {
	url: string; // URL template for the API endpoint (can include PARAM:* placeholders)
	method: 'GET' | 'POST' | 'PUT' | 'DELETE';
	headers?: Record<string, string>; // Header templates (can include PARAM:* placeholders)
	body_template?: Record<string, any> | string; // JSON object or string template for the request body (can include PARAM:*)
	// Add authentication details if needed (e.g., apiKeyParam: 'PARAM:SOME_API_KEY')
}

// Configuration for a client-side pixel/script action
export interface PixelConfig {
	script_template: string; // HTML/JS script template (can include PARAM:* placeholders)
	// Add other relevant config like placement ('head', 'body') if needed
}


// --- Admin API Types ---
export interface KvListResponse {
    keys: { name: string; expiration?: number; metadata?: unknown }[];
    list_complete: boolean;
    cursor?: string;
}

export interface KvWriteRequest {
    key: string;
    value: string;
    expirationTtl?: number; // Optional TTL in seconds
    metadata?: any; // Optional metadata
}

export interface KvReadResponse {
    value: string | null;
    metadata?: any;
}

export interface KvDeleteRequest {
    keys: string[];
}